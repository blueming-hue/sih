rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks ownership on existing document reads/updates/deletes
    function isOwner() {
      return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Checks ownership on creates (use request.resource because resource doesn't exist yet)
    function isOwnerOnCreate() {
      return isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Helper to allow only specific fields to change on update
    function onlyFieldsChanged(allowed) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowed);
    }

    // USERS collection: doc id should equal the user's uid
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.id;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;
    }

    // Public RESOURCES catalog: readable by anyone, write-restricted (adjust as needed)
    match /resources/{docId} {
      allow read: if true;
      allow write: if false; // Change to role-based check if you add admin roles
    }

    // Per-user collections: users can only access their own docs
    match /journal_entries/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /chat_sessions/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /chat_messages/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /assessments/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /appointments/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /notifications/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /mood_scores/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    match /resources_viewed/{docId} {
      allow create: if isOwnerOnCreate();
      allow read, update, delete: if isOwner();
    }

    // Forum: public read, signed-in create with ownership, controlled likes updates
    match /forum_posts/{postId} {
      // Anyone can read posts
      allow read: if true;
      // Only signed-in users can create posts, and they must set userId to their uid
      allow create: if isOwnerOnCreate();
      // Updates allowed for:
      //  - Owner: full update/delete
      //  - Any signed-in user: may update only likes and likedBy fields (for like/unlike)
      allow update: if isOwner() || (isSignedIn() && onlyFieldsChanged(["likes", "likedBy"]));
      allow delete: if isOwner();
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true; // Anyone can read comments
        allow create: if isOwnerOnCreate(); // Signed-in with userId == uid
        // Allow updates/deletes by owner of the comment
        allow update, delete: if isOwner();
      }
    }
  }
}
